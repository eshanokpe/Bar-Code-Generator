{
    "sourceFile": "app/Http/Controllers/BarcodeController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1751965527058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751965532965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         $patternPR = '/^PR(\\d{2})\\/(\\w)$/';\n \n         if (preg_match($patternR, $barcodeData, $matchesR)) {\n             // Format the barcode data as \"R01 - L2 - C\"\n-            $formattedBarcodeData = 'R' . $matchesR[1] . ' - L' . $matchesR[2] . ' - ' . $matchesR[3]$matchesR[];\n+            $formattedBarcodeData = 'R' . $matchesR[1] . ' - L' . $matchesR[2] . ' - ' . $matchesR[3].$matchesR[4];\n         }\n         // Check if the input matches the \"PR01/A\" format\n         elseif (preg_match($patternPR, $barcodeData, $matchesPR)) {\n             // Format the barcode data as \"PR01 - A\"\n"
                },
                {
                    "date": 1751965630865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     public function generateBarcode(Request $request)\n     {\n         // Get the barcode data from the form input\n         $barcodeData = trim($request->input('barcodeData'));\n-        dd(barcodeData)\n+        dd(barcodeData);\n         // Define regular expression patterns for both \"R01 - L2 - C\" and \"PR01/A\" formats\n         $patternR = '/^R(\\d{2})\\s*-\\s*L(\\d)\\s*-\\s*(\\w)$/';\n         $patternPR = '/^PR(\\d{2})\\/(\\w)$/';\n \n"
                }
            ],
            "date": 1751965527058,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Barcode;\nuse Illuminate\\Http\\Request;\nuse Picqer\\Barcode\\BarcodeGeneratorPNG;\nuse Illuminate\\Support\\Str;\n\nclass BarcodeController extends Controller\n{\n    public function index()\n    {\n        // Sample data for the welcome page\n        $location = 'R01';\n        $level = 'L2';\n        $bay = 'C';\n        $barcodeData = \"$location-$level-$bay\";\n        \n        $generator = new BarcodeGeneratorPNG();\n        $barcodeImage = 'data:image/png;base64,' . base64_encode(\n            $generator->getBarcode($barcodeData, $generator::TYPE_CODE_128)\n        );\n\n        $data = [\n            'barcode' => $barcodeImage,\n            'barcodeData' => $barcodeData,\n            'additionalRack' => \"Rack\",\n            'additionalLevel' => \"Level\",\n            'additionalBay' => \"Bay\",\n            'sampleFormats' => [\n                'Rack/Level/Bay' => 'R01/Level 2/C',\n                'PR Format' => 'PR01/A'\n            ]\n        ];\n\n        return view('welcome', $data);\n    }\n\n    public function generateBarcode(Request $request)\n    {\n        // Get the barcode data from the form input\n        $barcodeData = trim($request->input('barcodeData'));\n\n        // Define regular expression patterns for both \"R01 - L2 - C\" and \"PR01/A\" formats\n        $patternR = '/^R(\\d{2})\\s*-\\s*L(\\d)\\s*-\\s*(\\w)$/';\n        $patternPR = '/^PR(\\d{2})\\/(\\w)$/';\n\n        if (preg_match($patternR, $barcodeData, $matchesR)) {\n            // Format the barcode data as \"R01 - L2 - C\"\n            $formattedBarcodeData = 'R' . $matchesR[1] . ' - L' . $matchesR[2] . ' - ' . $matchesR[3]$matchesR[];\n        }\n        // Check if the input matches the \"PR01/A\" format\n        elseif (preg_match($patternPR, $barcodeData, $matchesPR)) {\n            // Format the barcode data as \"PR01 - A\"\n            $formattedBarcodeData = 'PR' . $matchesPR[1] . ' - ' . $matchesPR[2];\n        } else {\n            // Handle invalid input format\n            return redirect()->back()\n                ->withInput()\n                ->with('error', 'Invalid format. Valid formats: R01 - L2 - C or PR01/A');\n        }\n\n        // Generate the barcode image using the formatted input data\n        $generator = new BarcodeGeneratorPNG();\n        $barcodeImage = 'data:image/png;base64,' . base64_encode(\n            $generator->getBarcode($formattedBarcodeData, $generator::TYPE_CODE_128)\n        );\n\n        // Save the barcode data to the database\n        $barcode = new Barcode();\n        $barcode->barcode_data = $formattedBarcodeData;\n        $barcode->barcode_image = $barcodeImage; // Store the image as well\n        $barcode->save();\n\n        return redirect()->route('list-barcodes')\n            ->with('success', 'Barcode created successfully');\n    }\n\n    public function showBarcodes()\n    {\n        $barcodes = Barcode::latest()->paginate(10);\n\n        // Generate barcode images for each barcode\n        $barcodes->getCollection()->transform(function ($barcode) {\n            $generator = new BarcodeGeneratorPNG();\n            $barcode->image = 'data:image/png;base64,' . base64_encode(\n                $generator->getBarcode($barcode->barcode_data, $generator::TYPE_CODE_128)\n            );\n            return $barcode;\n        });\n\n        return view('barcode-list', [\n            'barcodes' => $barcodes,\n            'additionalRack' => \"Rack\",\n            'additionalLevel' => \"Level\",\n            'additionalBay' => \"Bay\"\n        ]);\n    }\n\n    public function deleteBarcode($id)\n    {\n        $barcode = Barcode::findOrFail($id);\n        $barcode->delete();\n\n        return redirect()->route('list-barcodes')\n            ->with('success', 'Barcode deleted successfully');\n    }\n\n    /**\n     * Format the barcode data based on input patterns\n     */\n    private function formatBarcodeData($input)\n    {\n        // Pattern for R01/Level 2/C format\n        if (preg_match('/^R(\\d{2})\\/Level (\\d)\\/(\\w)$/i', $input, $matches)) {\n            return sprintf('R%s - L%s - %s', \n                str_pad($matches[1], 2, '0', STR_PAD_LEFT), \n                $matches[2], \n                strtoupper($matches[3])\n            );\n        }\n\n        // Pattern for PR01/A format\n        if (preg_match('/^PR(\\d{2})\\/(\\w)$/i', $input, $matches)) {\n            return sprintf('PR%s - %s', \n                str_pad($matches[1], 2, '0', STR_PAD_LEFT), \n                strtoupper($matches[2])\n            );\n        }\n\n        return false;\n    }\n}"
        }
    ]
}